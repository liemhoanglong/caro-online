[{"C:\\code\\DACK\\caro-online\\src\\index.js":"1","C:\\code\\DACK\\caro-online\\src\\App.js":"2","C:\\code\\DACK\\caro-online\\src\\Components\\User\\login.js":"3","C:\\code\\DACK\\caro-online\\src\\Components\\User\\register.js":"4","C:\\code\\DACK\\caro-online\\src\\Components\\Main\\index.js":"5","C:\\code\\DACK\\caro-online\\src\\Components\\ListUser\\index.js":"6","C:\\code\\DACK\\caro-online\\src\\Components\\User\\Service\\authService.js":"7","C:\\code\\DACK\\caro-online\\src\\Util\\callAPI.js":"8"},{"size":449,"mtime":1607328017887,"results":"9","hashOfConfig":"10"},{"size":641,"mtime":1607328017883,"results":"11","hashOfConfig":"10"},{"size":5625,"mtime":1607328017886,"results":"12","hashOfConfig":"10"},{"size":11534,"mtime":1607328017886,"results":"13","hashOfConfig":"10"},{"size":2336,"mtime":1607418429900,"results":"14","hashOfConfig":"10"},{"size":2086,"mtime":1607328017884,"results":"15","hashOfConfig":"10"},{"size":954,"mtime":1607328017885,"results":"16","hashOfConfig":"10"},{"size":400,"mtime":1607328017887,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"5aip3s",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\code\\DACK\\caro-online\\src\\index.js",[],["39","40"],"C:\\code\\DACK\\caro-online\\src\\App.js",[],"C:\\code\\DACK\\caro-online\\src\\Components\\User\\login.js",[],"C:\\code\\DACK\\caro-online\\src\\Components\\User\\register.js",["41"],"import React, {useState} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Redirect, Link} from \"react-router-dom\";\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport {signUpService} from \"./Service/authService\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(1),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(1, 0, 2),\r\n        color: \"#fff\"\r\n    },\r\n    input: {\r\n        fontSize: \"15px\"\r\n    },\r\n    labelInput:{\r\n        fontSize: \"15px\"\r\n    }\r\n}));\r\n\r\n\r\nexport default function Register() {\r\n    const [information, setInformation] = useState({\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            username: \"\",\r\n            password: \"\",\r\n            rePassword: \"\",\r\n        }\r\n    )\r\n    const [status, setStatus] = useState({type: \"error\", content: \"\"});\r\n    const [alert, setAlert] = useState(false);\r\n    const [isSignUpSuccess, setIsSignUpSuccess] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if(information.email.length === 0 || information.lastName.length === 0 || information.firstName.length === 0 ||\r\n            information.password.length === 0 || information.rePassword.length === 0)\r\n        {\r\n            setStatus({type: \"error\", content: \"Please fill all fields\"})\r\n            setAlert(true);\r\n        }else if(information.password !== information.rePassword)\r\n        {\r\n            setStatus({type: \"error\", content: \"Password not match\"})\r\n            setAlert(true);\r\n        }\r\n        else if(information.password.length < 6)\r\n        {\r\n            setStatus({type: \"error\", content: \"Password at least 6 characters\"})\r\n            setAlert(true);\r\n        }\r\n        else {\r\n            const res = await signUpService(information.username, information.firstName,information.lastName,\r\n                information.password, information.email)\r\n            if(res.data.err)\r\n            {\r\n                setStatus({type: \"error\", content: res.data.err});\r\n                setAlert(true);\r\n            }else if (res.data.msg)\r\n            {\r\n                setStatus({type: \"success\", content: res.data.msg});\r\n                setAlert(true);\r\n                //direct\r\n                //setIsSignUpSuccess(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    if(isSignUpSuccess) return (<Redirect to=\"/login\"/>)\r\n\r\n    return (\r\n        <div>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Register\r\n                    </Typography>\r\n                    <Collapse in={alert}>\r\n                        <Alert severity={status.type}\r\n                               action={\r\n                                   <IconButton\r\n                                       aria-label=\"close\"\r\n                                       color=\"inherit\"\r\n                                       size=\"small\"\r\n                                       onClick={() => {\r\n                                           setAlert(false);\r\n                                       }}\r\n                                   >\r\n                                       <CloseIcon fontSize=\"inherit\" />\r\n                                   </IconButton>\r\n                               }\r\n                        >\r\n                            {status.content}\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    autoComplete=\"fname\"\r\n                                    name=\"firstName\"\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"firstName\"\r\n                                    label=\"First Name\"\r\n                                    autoFocus\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, firstName: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"lastName\"\r\n                                    label=\"Last Name\"\r\n                                    name=\"lastName\"\r\n                                    autoComplete=\"lname\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, lastName: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"username\"\r\n                                    label=\"Username\"\r\n                                    name=\"username\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, username: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, email: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, password: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"re-password\"\r\n                                    label=\"Re-Password\"\r\n                                    type=\"password\"\r\n                                    id=\"re-password\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, rePassword: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                        <Grid container justify=\"flex-end\">\r\n                            <Grid item>\r\n                                <Link to='/login' variant=\"body2\">\r\n                                    Already have an account? Login\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}","C:\\code\\DACK\\caro-online\\src\\Components\\Main\\index.js",["42","43","44"],"import React, { useEffect, useState } from \"react\"\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Link} from \"react-router-dom\"\r\nimport ListUser from \"../ListUser\";\r\nimport TextField from '@material-ui/core/TextField'\r\nimport io from 'socket.io-client'; \r\n\r\nconst socket = io.connect('localhost:3001');\r\n\r\nexport default function HomeScreen () \r\n{\r\n  const [state, setStaet] = useState({ message: '', name: '' })\r\n  const [chat, setChat] = useState([])\r\n\r\n  useEffect(() => {\r\n    socket.on('message', ({ name, message }) => {\r\n      setChat([...chat, { name, message }])\r\n    })\r\n  })\r\n\r\n  const onTextChange = e => {\r\n    setStaet({ ...state, [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const onMessageSubmit = e => {\r\n    e.preventDefault()\r\n    const { name, message } = state\r\n    socket.emit('message', { name, message })\r\n    setStaet({ message: '', name })\r\n  }\r\n\r\n  const renderChat = () => {\r\n    return chat.map(({ name, message }, index) => (\r\n      <div key={index}>\r\n        <h3>\r\n          {name}: <span>{message}</span>\r\n        </h3>\r\n      </div>\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <form onSubmit={onMessageSubmit}>\r\n        <h1>Messanger</h1>\r\n        <div className=\"name-field\">\r\n          <TextField\r\n            name=\"name\"\r\n            onChange={e => onTextChange(e)}\r\n            value={state.name}\r\n            label=\"Name\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <TextField\r\n            name=\"message\"\r\n            onChange={e => onTextChange(e)}\r\n            value={state.message}\r\n            id=\"outlined-multiline-static\"\r\n            variant=\"outlined\"\r\n            label=\"Message\"\r\n          />\r\n        </div>\r\n        <button>Send Message</button>\r\n      </form>\r\n      <div className=\"render-chat\">\r\n        <h1>Chat Log</h1>\r\n        {renderChat()}\r\n      </div>\r\n    </div>\r\n  )\r\n    // return(\r\n    //     <React.Fragment>\r\n    //         <div>Home</div>\r\n    //         <Link to=\"/login\" style={{ textDecoration: 'none', color: \"inherit\" }}>\r\n    //             <Button>Login</Button>\r\n    //         </Link>\r\n\r\n    //         <Link to=\"/register\" style={{ textDecoration: 'none', color: \"inherit\" }}>\r\n    //             <Button>Register</Button>\r\n    //         </Link>\r\n    //         <ListUser/>\r\n    //     </React.Fragment>\r\n    // )\r\n}","C:\\code\\DACK\\caro-online\\src\\Components\\ListUser\\index.js",["45","46"],"import React from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: '#E9ECEF',\r\n        maxHeight: 300,\r\n    },\r\n}));\r\n\r\nfunction ListItemLink(props) {\r\n    return <ListItem button component=\"a\" {...props} />;\r\n}\r\n\r\nexport default function ListUser() {\r\n\r\n    const users = [\r\n        { id: 1, name: \"long\", isActive: 1 },\r\n        { id: 2, name: \"kha\", isActive: 0 },\r\n        { id: 3, name: \"a\", isActive: 1 },\r\n        { id: 4, name: \"b\", isActive: 0 },\r\n        { id: 5, name: \"c\", isActive: 1 },\r\n        { id: 6, name: \"d\", isActive: 0 }\r\n    ]\r\n\r\n    let usersNow = users.filter(user => user.isActive === 1).concat(users.filter(user => user.isActive === 0))\r\n    // console.log(usersNow) \r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container>\r\n            <List className={classes.root} component=\"nav\" aria-label=\"main mailbox folders\">\r\n                {usersNow.map((user, i) => {\r\n                    return (\r\n                        <ListItem key={i} button style={{ borderRadius: \"10px\" }}>\r\n                            {user.isActive === 1 ?\r\n                                <ListItemIcon>\r\n                                    <FiberManualRecordIcon style={{ fill: \"green\" }} />\r\n                                </ListItemIcon>\r\n                                :\r\n\r\n                                <ListItemIcon>\r\n                                    <FiberManualRecordIcon />\r\n                                </ListItemIcon>\r\n                            }\r\n                            <ListItemText primary={user.name} />\r\n                        </ListItem>\r\n                    )\r\n                })\r\n                }\r\n            </List>\r\n        </Container>\r\n    );\r\n}",["47","48"],"C:\\code\\DACK\\caro-online\\src\\Components\\User\\Service\\authService.js",[],"C:\\code\\DACK\\caro-online\\src\\Util\\callAPI.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":59,"column":29,"nodeType":"55","messageId":"56","endLine":59,"endColumn":47},{"ruleId":"53","severity":1,"message":"57","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":14},{"ruleId":"53","severity":1,"message":"58","line":3,"column":9,"nodeType":"55","messageId":"56","endLine":3,"endColumn":13},{"ruleId":"53","severity":1,"message":"59","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":16},{"ruleId":"53","severity":1,"message":"58","line":2,"column":10,"nodeType":"55","messageId":"56","endLine":2,"endColumn":14},{"ruleId":"53","severity":1,"message":"60","line":16,"column":10,"nodeType":"55","messageId":"56","endLine":16,"endColumn":22},{"ruleId":"49","replacedBy":"61"},{"ruleId":"51","replacedBy":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'setIsSignUpSuccess' is assigned a value but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Link' is defined but never used.","'ListUser' is defined but never used.","'ListItemLink' is defined but never used.",["63"],["64"],"no-global-assign","no-unsafe-negation"]