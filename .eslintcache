[{"C:\\code\\DACK\\caro-online\\src\\index.js":"1","C:\\code\\DACK\\caro-online\\src\\App.js":"2","C:\\code\\DACK\\caro-online\\src\\Components\\User\\login.js":"3","C:\\code\\DACK\\caro-online\\src\\Components\\User\\register.js":"4","C:\\code\\DACK\\caro-online\\src\\Components\\Main\\index.js":"5","C:\\code\\DACK\\caro-online\\src\\Components\\ListUser\\index.js":"6","C:\\code\\DACK\\caro-online\\src\\Components\\User\\Service\\authService.js":"7","C:\\code\\DACK\\caro-online\\src\\Util\\callAPI.js":"8","C:\\code\\DACK\\caro-online\\src\\Util\\userAPI.js":"9","C:\\code\\DACK\\caro-online\\src\\Components\\Game\\index.js":"10","C:\\code\\DACK\\caro-online\\src\\Components\\Game\\board.js":"11","C:\\code\\DACK\\caro-online\\src\\Components\\Game\\square.js":"12"},{"size":449,"mtime":1607328017887,"results":"13","hashOfConfig":"14"},{"size":737,"mtime":1607937328222,"results":"15","hashOfConfig":"14"},{"size":5625,"mtime":1607328017886,"results":"16","hashOfConfig":"14"},{"size":11534,"mtime":1607328017886,"results":"17","hashOfConfig":"14"},{"size":4834,"mtime":1607940016721,"results":"18","hashOfConfig":"14"},{"size":1776,"mtime":1607498897942,"results":"19","hashOfConfig":"14"},{"size":992,"mtime":1607480502499,"results":"20","hashOfConfig":"14"},{"size":412,"mtime":1607430796540,"results":"21","hashOfConfig":"14"},{"size":243,"mtime":1607439946114,"results":"22","hashOfConfig":"14"},{"size":8477,"mtime":1608004974957,"results":"23","hashOfConfig":"14"},{"size":917,"mtime":1608004970120,"results":"24","hashOfConfig":"14"},{"size":295,"mtime":1608004968201,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"5aip3s",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\code\\DACK\\caro-online\\src\\index.js",[],["54","55"],"C:\\code\\DACK\\caro-online\\src\\App.js",[],"C:\\code\\DACK\\caro-online\\src\\Components\\User\\login.js",[],"C:\\code\\DACK\\caro-online\\src\\Components\\User\\register.js",["56"],"import React, {useState} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Redirect, Link} from \"react-router-dom\";\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport {signUpService} from \"./Service/authService\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(1),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(1, 0, 2),\r\n        color: \"#fff\"\r\n    },\r\n    input: {\r\n        fontSize: \"15px\"\r\n    },\r\n    labelInput:{\r\n        fontSize: \"15px\"\r\n    }\r\n}));\r\n\r\n\r\nexport default function Register() {\r\n    const [information, setInformation] = useState({\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            username: \"\",\r\n            password: \"\",\r\n            rePassword: \"\",\r\n        }\r\n    )\r\n    const [status, setStatus] = useState({type: \"error\", content: \"\"});\r\n    const [alert, setAlert] = useState(false);\r\n    const [isSignUpSuccess, setIsSignUpSuccess] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if(information.email.length === 0 || information.lastName.length === 0 || information.firstName.length === 0 ||\r\n            information.password.length === 0 || information.rePassword.length === 0)\r\n        {\r\n            setStatus({type: \"error\", content: \"Please fill all fields\"})\r\n            setAlert(true);\r\n        }else if(information.password !== information.rePassword)\r\n        {\r\n            setStatus({type: \"error\", content: \"Password not match\"})\r\n            setAlert(true);\r\n        }\r\n        else if(information.password.length < 6)\r\n        {\r\n            setStatus({type: \"error\", content: \"Password at least 6 characters\"})\r\n            setAlert(true);\r\n        }\r\n        else {\r\n            const res = await signUpService(information.username, information.firstName,information.lastName,\r\n                information.password, information.email)\r\n            if(res.data.err)\r\n            {\r\n                setStatus({type: \"error\", content: res.data.err});\r\n                setAlert(true);\r\n            }else if (res.data.msg)\r\n            {\r\n                setStatus({type: \"success\", content: res.data.msg});\r\n                setAlert(true);\r\n                //direct\r\n                //setIsSignUpSuccess(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    if(isSignUpSuccess) return (<Redirect to=\"/login\"/>)\r\n\r\n    return (\r\n        <div>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Register\r\n                    </Typography>\r\n                    <Collapse in={alert}>\r\n                        <Alert severity={status.type}\r\n                               action={\r\n                                   <IconButton\r\n                                       aria-label=\"close\"\r\n                                       color=\"inherit\"\r\n                                       size=\"small\"\r\n                                       onClick={() => {\r\n                                           setAlert(false);\r\n                                       }}\r\n                                   >\r\n                                       <CloseIcon fontSize=\"inherit\" />\r\n                                   </IconButton>\r\n                               }\r\n                        >\r\n                            {status.content}\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    autoComplete=\"fname\"\r\n                                    name=\"firstName\"\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"firstName\"\r\n                                    label=\"First Name\"\r\n                                    autoFocus\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, firstName: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"lastName\"\r\n                                    label=\"Last Name\"\r\n                                    name=\"lastName\"\r\n                                    autoComplete=\"lname\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, lastName: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"username\"\r\n                                    label=\"Username\"\r\n                                    name=\"username\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, username: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, email: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, password: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"re-password\"\r\n                                    label=\"Re-Password\"\r\n                                    type=\"password\"\r\n                                    id=\"re-password\"\r\n                                    InputProps={{\r\n                                        className: classes.input\r\n                                    }}\r\n                                    InputLabelProps={{\r\n                                        className: classes.labelInput\r\n                                    }}\r\n                                    onChange = {(e) => setInformation({...information, rePassword: e.target.value})}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                        <Grid container justify=\"flex-end\">\r\n                            <Grid item>\r\n                                <Link to='/login' variant=\"body2\">\r\n                                    Already have an account? Login\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}","C:\\code\\DACK\\caro-online\\src\\Components\\Main\\index.js",["57","58"],"import React, { useEffect, useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport io from 'socket.io-client';\r\n\r\n//api local\r\nimport ListUser from \"../ListUser\";\r\nimport userAPI from '../../Util/userAPI';\r\n\r\nconst socket = io.connect('localhost:3000');\r\n\r\nexport default function HomeScreen() {\r\n    const [reset, setReset] = useState(true);\r\n    //danh sách user có trong database\r\n    const [listUser, setListUser] = useState([]);\r\n    //danh sách user dang online\r\n    const [listUserNow, setListUserNow] = useState([]);\r\n\r\n    // console.log(JSON.parse(localStorage.getItem(\"user\")).id)\r\n    // socket nói\r\n    useEffect(() => {\r\n        const rederListUser = async () => {\r\n            try {\r\n                let res = await userAPI.getAllUser();\r\n                //xóa người dùng hiện thời ra khỏi list user\r\n                const idUser = JSON.parse(localStorage.getItem(\"user\")).id\r\n                res = res.filter(item => item.id !== idUser)\r\n                setListUser(res);\r\n                // console.log(res);\r\n                socket.emit('client-send-data', idUser)\r\n                setReset(!reset);\r\n            } catch (error) {\r\n                console.log('Failed to fetch: ', error);\r\n            }\r\n        }\r\n        rederListUser();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // socket nghe user login\r\n        socket.on('server-send-data', (listUsersOnline) => {\r\n            let temp = listUsersOnline\r\n            // console.log('connect '+JSON.stringify(listUsersOnline));\r\n            setListUserNow(temp);\r\n            // console.log('connect '+JSON.stringify(listUserNow));\r\n        })\r\n\r\n        // socket nghe user logout\r\n        socket.on('disconnect', (listUsersOnline) => {\r\n            let temp = listUsersOnline\r\n            // console.log('disconnect '+ JSON.stringify(listUsersOnline));\r\n            setListUserNow(temp);\r\n            // console.log('disconnect '+JSON.stringify(listUserNow));\r\n        })\r\n    })    \r\n    \r\n    // const [state, setState] = useState({ message: '', name: '' })\r\n    // const [chat, setChat] = useState([])\r\n\r\n    // useEffect(() => {\r\n    //     socket.on('message', ({ name, message }) => {\r\n    //         setChat([...chat, { name, message }])\r\n    //     })\r\n    // })\r\n\r\n    // const onTextChange = e => {\r\n    //     setState({ ...state, [e.target.name]: e.target.value })\r\n    // }\r\n\r\n    // const onMessageSubmit = e => {\r\n    //     e.preventDefault()\r\n    //     const { name, message } = state\r\n    //     socket.emit('message', { name, message })\r\n    //     setState({ message: '', name })\r\n    // }\r\n\r\n    // const renderChat = () => {\r\n    //     return chat.map(({ name, message }, index) => (\r\n    //         <div key={index}>\r\n    //             <h3>\r\n    //                 {name}: <span>{message}</span>\r\n    //             </h3>\r\n    //         </div>\r\n    //     ))\r\n    // }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <button onClick={() => { setReset(!reset) }}>Home</button>\r\n            <Link to=\"/login\" style={{ textDecoration: 'none', color: \"inherit\" }}>\r\n                <Button>Login</Button>\r\n            </Link>\r\n\r\n            <Link to=\"/register\" style={{ textDecoration: 'none', color: \"inherit\" }}>\r\n                <Button>Register</Button>\r\n            </Link>\r\n            \r\n            <Link to=\"/game\" style={{ textDecoration: 'none', color: \"inherit\" }}>\r\n                <Button>Play Now</Button>\r\n            </Link>\r\n            <ListUser listUser={listUser} listUserNow={listUserNow}/>\r\n            {/* <div className=\"card\">\r\n                <form onSubmit={onMessageSubmit}>\r\n                    <h1>Messanger</h1>\r\n                    <div className=\"name-field\">\r\n                        <TextField\r\n                            name=\"name\"\r\n                            onChange={e => onTextChange(e)}\r\n                            value={state.name}\r\n                            label=\"Name\"\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <TextField\r\n                            name=\"message\"\r\n                            onChange={e => onTextChange(e)}\r\n                            value={state.message}\r\n                            id=\"outlined-multiline-static\"\r\n                            variant=\"outlined\"\r\n                            label=\"Message\"\r\n                        />\r\n                    </div>\r\n                    <button>Send Message</button>\r\n                </form>\r\n                <div className=\"render-chat\">\r\n                    <h1>Chat Log</h1>\r\n                    {renderChat()}\r\n                </div>\r\n            </div> */}\r\n        </React.Fragment>\r\n    )\r\n}","C:\\code\\DACK\\caro-online\\src\\Components\\ListUser\\index.js",["59","60"],"import React from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: '#E9ECEF',\r\n        maxHeight: 300,\r\n    },\r\n}));\r\n\r\nexport default function ListUser(props) {\r\n    // const userOnline = [\"5fcc7c0f39b1402038d3091f\"];\r\n    console.log(props.listUserNow)\r\n    const userOnline = props.listUserNow.reduce((a, o) => (a.push(o.userID), a), []) \r\n    console.log(userOnline)\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container>\r\n            <List className={classes.root} component=\"nav\" aria-label=\"main mailbox folders\">\r\n                {props.listUser.map((user, i) => {\r\n                    return (\r\n                        <ListItem key={i} button style={{ borderRadius: \"10px\" }}>\r\n                            { userOnline.includes(user.id) ?\r\n                                <ListItemIcon>\r\n                                    <FiberManualRecordIcon style={{ fill: \"green\" }} />\r\n                                </ListItemIcon>\r\n                                :\r\n\r\n                                <ListItemIcon>\r\n                                    <FiberManualRecordIcon />\r\n                                </ListItemIcon>\r\n                            }\r\n                            <ListItemText primary={user.name} />\r\n                        </ListItem>\r\n                    )\r\n                })\r\n                }\r\n            </List>\r\n        </Container>\r\n    );\r\n}","C:\\code\\DACK\\caro-online\\src\\Components\\User\\Service\\authService.js",[],"C:\\code\\DACK\\caro-online\\src\\Util\\callAPI.js",[],"C:\\code\\DACK\\caro-online\\src\\Util\\userAPI.js",[],"C:\\code\\DACK\\caro-online\\src\\Components\\Game\\index.js",["61","62","63","64"],"C:\\code\\DACK\\caro-online\\src\\Components\\Game\\board.js",[],"C:\\code\\DACK\\caro-online\\src\\Components\\Game\\square.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":59,"column":29,"nodeType":"71","messageId":"72","endLine":59,"endColumn":47},{"ruleId":"69","severity":1,"message":"73","line":4,"column":8,"nodeType":"71","messageId":"72","endLine":4,"endColumn":17},{"ruleId":"74","severity":1,"message":"75","line":38,"column":8,"nodeType":"76","endLine":38,"endColumn":10,"suggestions":"77"},{"ruleId":"69","severity":1,"message":"78","line":2,"column":10,"nodeType":"71","messageId":"72","endLine":2,"endColumn":14},{"ruleId":"79","severity":1,"message":"80","line":19,"column":76,"nodeType":"81","messageId":"82","endLine":19,"endColumn":77},{"ruleId":"69","severity":1,"message":"83","line":20,"column":18,"nodeType":"71","messageId":"72","endLine":20,"endColumn":25},{"ruleId":"69","severity":1,"message":"84","line":47,"column":11,"nodeType":"71","messageId":"72","endLine":47,"endColumn":17},{"ruleId":"69","severity":1,"message":"85","line":169,"column":7,"nodeType":"71","messageId":"72","endLine":169,"endColumn":15},{"ruleId":"69","severity":1,"message":"86","line":176,"column":10,"nodeType":"71","messageId":"72","endLine":176,"endColumn":25},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'setIsSignUpSuccess' is assigned a value but never used.","Identifier","unusedVar","'TextField' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'reset'. Either include it or remove the dependency array. You can also do a functional update 'setReset(r => ...)' if you only need 'reset' in the 'setReset' call.","ArrayExpression",["89"],"'Link' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'setSize' is assigned a value but never used.","'jumpTo' is assigned a value but never used.","'location' is assigned a value but never used.","'calculateWinner' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [reset]",{"range":"92","text":"93"},[1388,1390],"[reset]"]